# 定义项目中使用的各个依赖的版本号
# 用途: 通过为每个版本分配一个标识符，您可以在整个版本目录中重用这些版本号
[versions]
compileSdk = "34"
minSdk = "21"
targetSdk = "34"
versionCode = "1"
versionName = "1.0.0"
applicationId = "com.wuc.designpattern"
testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"

androidGradlePlugin = "8.1.4"
kotlinVersion = "1.9.0"
coroutinesVersion = "1.8.0"

appcompat = "1.6.1"
supportV4 = "1.0.0"
coreKtx = "1.9.0"
activityKtx = "1.8.0"
fragment = "1.5.4"
fragmentKtx = "1.5.4"
constraintLayout = "2.1.4"
cardView = "1.0.0"
material = "1.11.0"
recyclerView = "1.2.1"
multidex = "2.0.1"
viewpager = "1.0.0"
viewpager2 = "1.1.0-beta01"

lifecycleVersion = "2.7.0"
hiltVersion = "2.45"
navigationVersion = "2.5.3"
dataStoreVersion = "1.1.0-beta01"
workVersion = "2.8.1"

junit = "4.13.2"
androidJunit = "1.1.5"
espresso = "3.5.1"

#第三方
aRouterVersion = "1.0.3"
retrofitVersion = "2.9.0"
glideVersion = "4.11.0"
imageSelectorVersion = "v3.11.2"
xPopupVersion = "2.10.0"
pickerVersion = "1.0.1"
easyAdapterVersion = "1.2.8"
smartRefreshVersion = "2.1.0"
toasterVersion = "12.6"
permissionVersion = "18.6"
gsonFactoryVersion = "9.5"
gsonVersion = "2.10.1"
bannerVersion = "2.2.3"
brvahVersion = "3.0.4"
liveBusVersion = "1.8.0"

# 定义项目依赖的库
# 用途: 在这个部分，您可以具体列出项目需要的库及其坐标（group，name，[version]）。
# 您还可以引用 [versions] 部分定义的版本号，从而避免在每个库定义中重复版本号。
[libraries]
#基础与UI
appcompat = { module = "androidx.appcompat:appcompat", version.ref = "appcompat" }
supportV4 = { module = "androidx.legacy:legacy-support-v4", version.ref = "supportV4" }
coreKtx = { module = "androidx.core:core-ktx", version.ref = "coreKtx" }
activityKtx = { module = "androidx.activity:activity-ktx", version.ref = "activityKtx" }
fragment = { module = "androidx.fragment:fragment", version.ref = "fragment" }
fragmentKtx = { module = "androidx.fragment:fragment-ktx", version.ref = "fragmentKtx" }
multidex = { module = "androidx.multidex:multidex", version.ref = "multidex" }

#Widget
constraintLayout = { module = "androidx.constraintlayout:constraintlayout", version.ref = "constraintLayout" }
recyclerView = { module = "androidx.recyclerview:recyclerview", version.ref = "recyclerView" }
cardView = { module = "androidx.cardview:cardview", version.ref = "cardView" }
material = { module = "com.google.android.material:material", version.ref = "material" }

#lifecycle
lifecycle-runtime = { module = "androidx.lifecycle:lifecycle-runtime", version.ref = "lifecycleVersion" }
lifecycle-runtimektx = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "lifecycleVersion" }
lifecycle-livedata = { module = "androidx.lifecycle:lifecycle-livedata", version.ref = "lifecycleVersion" }
lifecycle-livedataKtx = { module = "androidx.lifecycle:lifecycle-livedata-ktx", version.ref = "lifecycleVersion" }
lifecycle-viewModel = { module = "androidx.lifecycle:lifecycle-viewmodel", version.ref = "lifecycleVersion" }
lifecycle-viewModelKtx = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "lifecycleVersion" }
lifecycle-viewModelSavedState = { module = "androidx.lifecycle:lifecycle-viewmodel-savedstate", version.ref = "lifecycleVersion" }
lifecycle-compiler = { module = "androidx.lifecycle:lifecycle-compiler", version.ref = "lifecycleVersion" }

#Kotlin与协程
stdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlinVersion" }
reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlinVersion" }
stdlibJdk7 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk7", version.ref = "kotlinVersion" }
stdlibJdk8 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8", version.ref = "kotlinVersion" }
coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutinesVersion" }
coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "coroutinesVersion" }

#ViewPager
viewpager = { module = "androidx.viewpager:viewpager", version.ref = "viewpager" }
viewpager2 = { module = "androidx.viewpager2:viewpager2", version.ref = "viewpager2" }

#Hilt
hilt-android = { module = "com.google.dagger:hilt-android", version.ref = "hiltVersion" }
hilt-compiler = { module = "com.google.dagger:hilt-android-compiler", version.ref = "hiltVersion" }

#Work
work-runtime = { module = "androidx.work:work-runtime", version.ref = "workVersion" }
work-runtimeKtx = { module = "androidx.work:work-runtime-ktx", version.ref = "workVersion" }

#Navigation
navigation-fragment = { module = "androidx.navigation:navigation-fragment-ktx", version.ref = "navigationVersion" }
navigation-ui = { module = "androidx.navigation:navigation-ui-ktx", version.ref = "navigationVersion" }
navigation-dynamic = { module = "androidx.navigation:navigation-dynamic-features-fragment", version.ref = "navigationVersion" }
navigation-dynamicRuntime = { module = "androidx.navigation:navigation-dynamic-features-runtime", version.ref = "navigationVersion" }
navigation-testing = { module = "androidx.navigation:navigation-testing", version.ref = "navigationVersion" }

#DataStore
datastore-core = { module = "androidx.datastore:datastore-core", version.ref = "dataStoreVersion" }
datastore-preferences = { module = "androidx.datastore:datastore-preferences", version.ref = "dataStoreVersion" }

#测试
junit = { module = "junit:junit", version.ref = "junit" }
androidJunit = { module = "androidx.test.ext:junit", version.ref = "androidJunit" }
espresso = { module = "androidx.test.espresso:espresso-core", version.ref = "espresso" }

#第三方依赖库
#ARouter
arouter-core = { module = "com.github.jadepeakpoet.ARouter:arouter-api", version.ref = "aRouterVersion" }
arouter-compiler = { module = "com.github.jadepeakpoet.ARouter:arouter-compiler", version.ref = "aRouterVersion" }

#Retrofit
retrofit-core = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofitVersion" }
retrofit-gson = { module = "com.squareup.retrofit2:converter-gson", version.ref = "retrofitVersion" }
gson = { module = "com.google.code.gson:gson", version.ref = "gsonVersion" }
gsonFactory = { module = "com.github.getActivity:GsonFactory", version.ref = "gsonFactoryVersion" }

#Glide
glide-core = { module = "com.github.bumptech.glide:glide", version.ref = "glideVersion" }
glide-annotation = { module = "com.github.bumptech.glide:annotations", version.ref = "glideVersion" }
glide-integration = { module = "com.github.bumptech.glide:okhttp3-integration", version.ref = "glideVersion" }
glide-compiler = { module = "com.github.bumptech.glide:compiler", version.ref = "glideVersion" }

#图片选择处理
imageSelector-core = { module = "io.github.lucksiege:pictureselector", version.ref = "imageSelectorVersion" }
imageSelector-compress = { module = "io.github.lucksiege:compress", version.ref = "imageSelectorVersion" }
imageSelector-ucrop = { module = "io.github.lucksiege:ucrop", version.ref = "imageSelectorVersion" }

#弹窗
xpopup-core = { module = "com.github.li-xiaojun:XPopup", version.ref = "xPopupVersion" }
xpopup-picker = { module = "com.github.li-xiaojun:XPopupExt", version.ref = "pickerVersion" }
easyAdapter = { module = "com.github.li-xiaojun:EasyAdapter", version.ref = "easyAdapterVersion" }

#刷新
smartRefresh-core = { module = "io.github.scwang90:refresh-layout-kernel", version.ref = "smartRefreshVersion" }
smartRefresh-header = { module = "io.github.scwang90:refresh-header-classics", version.ref = "smartRefreshVersion" }

#气泡
toaster = { module = "com.github.getActivity:Toaster", version.ref = "toasterVersion" }

#权限
xxPermissions = { module = "com.github.getActivity:XXPermissions", version.ref = "permissionVersion" }

#轮播
banner = { module = "io.github.youth5201314:banner", version.ref = "bannerVersion" }

#BRVAH
brvah = { module = "com.github.CymChad:BaseRecyclerViewAdapterHelper", version.ref = "brvahVersion" }

#Bus
liveBus = { module = "io.github.jeremyliao:live-event-bus-x", version.ref = "liveBusVersion" }


#Gradle插件
androidGradlePlugin = { module = "com.android.tools.build:gradle", version.ref = "androidGradlePlugin" }
kotlin-plugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlinVersion" }
hilt-plugin = { module = "com.google.dagger:hilt-android-gradle-plugin", version.ref = "hiltVersion" }
arouter-plugin = { module = "com.github.jadepeakpoet.ARouter:arouter-register", version.ref = "aRouterVersion" }

# 定义一组相关的依赖，可以一起引入项目中
# 用途: 通过创建包（bundle），您可以将相关的依赖分组在一起，然后在项目的不同模块中一次性引入这些依赖。
# 这对于管理那些经常一起使用的库非常有用，如测试库集合、日志库集合等。
[bundles]
appcompatBundles = ["appcompat", "supportV4", "coreKtx", "activityKtx", "fragment", "fragmentKtx", "multidex"]
lifecycleBundles = ["lifecycle-runtime", "lifecycle-runtimektx", "lifecycle-livedata", "lifecycle-livedataKtx", "lifecycle-viewModel", "lifecycle-viewModelKtx", "lifecycle-viewModelSavedState"]
widgetBundles = ["constraintLayout", "recyclerView", "cardView", "material", "viewpager", "viewpager2"]
kotlinBundles = ["stdlib", "reflect", "stdlibJdk7", "stdlibJdk8", "coroutines-core", "coroutines-android"]
navigationBundles = ["navigation-fragment", "navigation-ui", "navigation-dynamic", "navigation-dynamicRuntime", "navigation-testing"]
dataStoreBundles = ["datastore-core", "datastore-preferences"]
retrofitBundles = ["retrofit-core", "retrofit-gson", "gson", "gsonFactory"]
glideBundles = ["glide-core", "glide-annotation", "glide-integration"]
imageSelectorBundles = ["imageSelector-core", "imageSelector-compress", "imageSelector-ucrop"]
refreshBundles = ["smartRefresh-core", "smartRefresh-header"]
xpopupBundles = ["xpopup-core", "xpopup-picker", "easyAdapter"]

# 定义Gradle插件的依赖
# 用途: 在这个部分，您可以列出项目中使用的Gradle插件及其版本。同样，您可以利用 [versions] 中定义的版本号来统一管理插件版本。
[plugins]

